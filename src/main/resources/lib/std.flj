(def nil
  '())

(def inc
  (fn (n)
    (+ n 1)))

(def dec
  (fn (n)
    (- n 1)))

(def fact
  (fn (n)
    (if (= n 0) 
      1 
      (* n (fact (dec n))))))

(def sqr
  (fn (n)
    (* n n)))

(def abs
  (fn (x)
    (if (>= x 0) x (- 0 x))))

(def not
  (fn (x)
    (if x false true)))

(def empty?
  (fn (seq)
    (= nil seq)))

(def map 
  (fn (sym lst) 
    (if (empty? lst) 
      '() 
      (prepend 
        (apply sym (head lst))
        (map sym (tail lst))))))
      
(def join-reversed 
  (fn (a b)
    (if (empty? a)
      b 
      (join-reversed
        (tail a) 
        (prepend (head a) b)))))

(def join
  (fn (a b)
    (join-reversed (reverse a) b)))
